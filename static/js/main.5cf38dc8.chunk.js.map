{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","console","log","target","value","props","add","handleChange","setState","name","bind","state","a","b","c","this","focus","ref","inp","onChange","onKeyDown","type","parseInt","onClick","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","delItem","splice","addItem","data","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className"],"mappings":"iPAEuBA,Y,2BCEFC,E,YACjB,aAAc,IAAD,8BACT,+CASJC,YAAY,SAACC,GAEM,KAAZA,EAAEC,UACDC,QAAQC,IAAIH,EAAEI,OAAOC,OACrB,EAAKC,MAAMC,IAAIP,EAAEI,OAAOC,SAdnB,EAkBbG,aAAa,SAACR,GACV,EAAKS,SAAL,eACKT,EAAEI,OAAOM,KAAMV,EAAEI,OAAOC,SAlB7B,EAAKN,YAAY,EAAKA,YAAYY,KAAjB,gBACjB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAwBTb,QAAQC,IAAIa,MACZA,KAAKH,EAAEI,U,+BAED,IAAD,OACL,OACI,6BACI,2BAAOC,IAAK,SAACC,GAAO,EAAKN,EAAEM,GAAMT,KAAK,IAAIU,SAAUJ,KAAKR,aAAea,UAAWL,KAAKjB,YAAauB,KAAK,SAD9G,IAGI,2BAAOZ,KAAK,IAAIU,SAAUJ,KAAKR,aAAea,UAAWL,KAAKjB,YAAauB,KAAK,SAHpF,IAKI,2BAAOZ,KAAK,IAAIU,SAAUJ,KAAKR,aAAca,UAAWL,KAAKjB,YAAauB,KAAK,SALnF,IAOI,2BAAIC,SAAwB,KAAfP,KAAKJ,MAAMC,EAAO,EAAEG,KAAKJ,MAAMC,GAAGU,SAAwB,KAAfP,KAAKJ,MAAME,EAAO,EAAEE,KAAKJ,MAAME,GAAGS,SAAwB,KAAfP,KAAKJ,MAAMG,EAAO,EAAEC,KAAKJ,MAAMG,IAElI,2BAAOG,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMG,KAAK,SACxC,4BAAQE,QAAS,WAAKtB,QAAQC,IAAI,EAAKgB,IAAId,SAA3C,qB,GAxCuBR,aCDlB4B,E,iLAIP,IAAD,OACAC,EAAQV,KAAKV,MAAboB,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,MAAuB,4BAAQJ,QAAS,SAACxB,GAAD,OAAK,EAAKM,MAAMyB,IAAIF,EAAI7B,KAAzC,yB,GAT3BH,aAqBrC4B,EAAQO,aAAa,CACjBN,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICrBGO,E,YACjB,aAAc,IAAD,uBACT,+CAmBJC,QAAQ,SAACL,EAAI7B,GAETE,QAAQC,IAAIH,GACZ,IAAI0B,EAAK,YAAI,EAAKd,MAAMc,MACxBA,EAAKS,OAAON,EAAI,GAGhB,EAAKpB,UAAS,SAACG,EAAMN,GAEjB,OADAJ,QAAQC,IAAIS,EAAMc,MACZ,CACFA,KAAKA,OA9BJ,EAuCbU,QAAQ,SAACC,GAELnC,QAAQC,IAAI,EAAKS,MAAMc,MACvB,EAAKjB,SAAS,CACViB,KAAK,GAAD,mBAAK,EAAKd,MAAMc,MAAhB,CAAqBW,OAzC7B,EAAKzB,MAAQ,CACTc,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIY,EAAI,CAACzB,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAKlByB,EAAEC,OAAOC,OAAO,GAAGH,EAJd,CAACvB,EAAE,MAPH,OAYTb,QAAQC,IAAIoC,GACZrC,QAAQC,IAAIqC,OAAOE,KAAKJ,IAExBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAACf,GACtB1B,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAImC,EAAIV,OAjBX,E,sEA+CT,OACI,6BACI,kBAAC,EAAD,CAAWrB,IAAKS,KAAKoB,UACrB,kBAAC,EAAD,CAASL,IAAKf,KAAKkB,QAASR,KAAMV,KAAKJ,MAAMc,Y,GAnDvB7B,aCmBtC+C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAiHlBD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.5cf38dc8.chunk.js","sourcesContent":["import React ,{Fragment, Component}from 'react';\r\n//类定义组件\r\nclass ShowTime extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        setInterval(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n             \r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"didmount\");\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getSnapshot\");\r\n        return {name:this.state.a};\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log(\"didupdate\");\r\n        console.log(preProps,preState);\r\n    }\r\n    render(){\r\n        console.log(\"render\");\r\n        var {name,age}=this.props;\r\n        return (\r\n            <Fragment>\r\n                {/*条件渲染*/}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                 \r\n                {/*循环渲染 */}\r\n                <div>\r\n                     {\r\n                         age.map((item,index)=>{\r\n                             if(index%2===0){\r\n                                return <p key={index}>{item}</p>\r\n                             }\r\n                              \r\n                         })\r\n                     }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\n//export default ShowTime;\r\n\r\n//命名导出;可以导出多个，被引入时与导出的名一致\r\nexport {ShowTime};\r\n ","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值(表单验证)/写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n//箭头函数\r\n    handleInput=(e)=>{\r\n        //绑定this,事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode===13){//回车的时候输出\r\n            console.log(e.target.value);\r\n            this.props.add(e.target.value);\r\n        }\r\n         \r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        this.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange}  onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange}  onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{parseInt(this.state.a===\"\"?0:this.state.a)+parseInt(this.state.b===\"\"?0:this.state.b)+parseInt(this.state.c===\"\"?0:this.state.c)}</p>\r\n                {/* 非受控组件 :一次性获取或处理表单元素的值*/}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n             \r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem(idx,e){\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=><li key={idx}>{item}---<button onClick={(e)=>this.props.del(idx,e)}>删除</button></li>)\r\n                    //()=>事件处理函数 在当中调用函数 也可以传事件对象e\r\n                    // todo.map((item,idx)=><li key={idx}>{item}---<button onClick={this.props.del.bind(this,idx)}>删除</button></li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4,5]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n        //深拷贝 浅拷贝\r\n        var obj={a:100,b:[1,2,3]};\r\n        var obj1={c:300};\r\n        // var o={...obj};//浅拷贝\r\n        //var o=JSON.parse(JSON.stringify(obj));//深拷贝\r\n        ///o.b[0]=200;\r\n        var o=Object.assign({},obj,obj1);//{}是最后的合起来的对象   将两个对象合起来\r\n        console.log(o);//\r\n        console.log(Object.keys(obj));//obj的属性\r\n        //  遍历对象\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n    }\r\n    delItem=(idx,e)=>{\r\n         //不能直接改变或处理state，通过setState改变\r\n        console.log(e);\r\n        let todo=[...this.state.todo]//拷贝\r\n        todo.splice(idx,1);\r\n        //setState是异步执行\r\n        //在setState里获取state可能会出错，可以像上面一样，把第一个参数写成函数，就可以得出\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);//这里state是原来的值\r\n            return{\r\n                todo:todo\r\n            }\r\n        })\r\n        // this.setState({\r\n        //     todo:todo\r\n        // },()=>{\r\n        //     console.log(this.state.todo);//改变数组之后返回\r\n        // })\r\n    }\r\n    addItem=(data)=>{\r\n        // this.state.todo.push(data);\r\n        console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './ShowTime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\ndiv.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}